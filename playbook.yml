---
- hosts: localhost
  become: true
  gather_facts: no
  tasks:
      - name: Install aptitude
        ansible.builtin.apt:
          name: aptitude
          state: latest
          update_cache: true

      - name: Install required system packages
        ansible.builtin.apt:
          pkg:
            - apt-transport-https
            - ca-certificates
            - curl
            - sshpass
            - sudo
            - pipx
            - ssh
            - software-properties-common
            - python3-pip
            - vim
            - stress
            - apt-utils
            - virtualenv
            - python3-setuptools
          state: latest
          update_cache: true

      - name: Add Docker GPG apt Key
        ansible.builtin.apt_key:
          url: https://download.docker.com/linux/ubuntu/gpg
          state: present

      - name: Add Docker Repository
        ansible.builtin.apt_repository:
          repo: deb https://download.docker.com/linux/ubuntu bionic stable
          state: present
        
      - name: Update apt and install ansible
        ansible.builtin.apt:
          name: ansible
          state: latest
          update_cache: true

      - name: Update apt and install ansible-core
        ansible.builtin.apt:
          name: ansible-core
          state: latest
          update_cache: true

      - name: Install Docker Module for Python
        ansible.builtin.pip:
          name: docker

      - name: log into docker hub registry
        community.docker.docker_login:
          username: "{{ dockerhub_username }}"
          password: "{{ dockerhub_password }}"

      - name: create build directory
        file:
          path: /root/devops-dockerfile
          state: directory
          owner: root
          group: root
          mode: '0755'

      - name: Update Hello-World to Hello-Devops
        ansible.builtin.blockinfile:
          path: ./Dockerfile
          insertbefore: "COPY . ./App"
          block: |           
            # Replace file content (for the client-facing website)
            RUN sed -i "s|hello-world|hello-devops|g" package.json
            # Verify file changes to App.js
            RUN cat package.json

            # Access temporary subfolder
            WORKDIR /data/app/capstone_project/hello-world/src

            # Replace file content (for the client-facing website)
            RUN sed -i "s|Hello World!|Hello DevOps!|g" App.js
            # Verify file changes to App.js
            RUN cat App.js

            # Replace file content of App.test.js (to pass the tests)
            RUN sed -i "s|Hello World!|Hello DevOps!|g" App.test.js
            # Verify file changes to App.test.js
            RUN cat App.test.js

            WORKDIR /data/app/capstone_project/hello-world

      - name: copy Dockerfile
        copy:
          src: ./Dockerfile
          dest: /root/devops-dockerfile/Dockerfile
          owner: root
          group: root
          mode: '0644'

      - name: build container image
        community.docker.docker_image:
          name: hello-devops
          source: build
          build:
            path: /root/devops-dockerfile
          state: present
        tags: latest

      - name: archive container image as a tarball
        community.docker.docker_image:
          name: hello-devops
          archive_path: /root/hello-devops-latest.tar
          source: pull
          state: present
        tags: latest

      - name: fetch archived image
        fetch:
          src: /root/hello-devops-latest.tar
          dest: ./hello-devops-latest.tar
          flat: true

      - name: copy tarball to host
        copy:
          src: hello-devops-latest.tar
          dest: /root/hello-devops-latest.tar

      - name: load container from tarball
        community.docker.docker_image:
          name: hello-devops
          load_path: /root/hello-devops-latest.tar
          state: present
          source: local
        tags: latest

      - name: Tag and push to docker hub
        community.docker.docker_image:
          name: hello-devops
          repository: "{{ dockerhub_username }}/hello-devops:latest"
          push: true
          source: local
        tags: latest

      - name: ensure a container is running
        community.docker.docker_container:
          name: hello-devops
          state: started
          image: "{{ dockerhub_username }}/hello-devops:latest"
          pull: true
          ports:
            - "3000:3000"
