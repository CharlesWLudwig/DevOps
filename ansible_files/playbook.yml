name: Testing the Action

on: [pull_request]

env:
  RUNNER_TEMP: /tmp
  TEST_ARTIFACT_VERSION: 0.8.14

jobs:
  local_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version-file: .node-version
          cache: 'npm'
          check-latest: true

      - name: Install Dependencies
        run: npm ci

      - name: Check Format
        run: npm run format-check

      - name: Run tests
        run: npm test

  test_deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up action.yml
        run: cp action_ci.yml action.yml

      - name: Test the action
        uses: ./
        with:
          api_key: '${{ secrets.GALAXY_API_KEY }}'
          # Fake location that's a small amount of content
          collection_dir: 'fake_collection'

      - name: Test the action with a custom version
        uses: ./
        with:
          api_key: '${{ secrets.GALAXY_API_KEY }}'
          collection_dir: 'fake_collection'
          # Custom version
          galaxy_version: '${{ env.TEST_ARTIFACT_VERSION }}-test'

  test_build_then_publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up action.yml
        run: cp action_ci.yml action.yml

      - name: Test the action - only build
        uses: ./
        with:
          api_key: '${{ secrets.GALAXY_API_KEY }}'
          collection_dir: 'fake_collection'
          # Different from above version
          galaxy_version: '${{ env.TEST_ARTIFACT_VERSION }}-build'
          build: true
          publish: false

      - name: Test the action - only publish
        uses: ./
        with:
          api_key: '${{ secrets.GALAXY_API_KEY }}'
          collection_dir: 'fake_collection'
          # Should match version above
          galaxy_version: '${{ env.TEST_ARTIFACT_VERSION }}-build'
          build: false
          publish: true

  snapshot:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/artis3n/ansible_galaxy_collection-testartifact
          tags: |
            type=raw,value=SNAPSHOT-${{ github.sha }}

      - name: Build and Push
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64
          file: ./Dockerfile
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max








- hosts: all
  become: true
  vars:
    container_count: 4
    default_container_name: docker
    default_container_image: ubuntu
    default_container_command: sleep 1d

  collections:
    - name: community.docker

  tasks:
    - name: Install aptitude
      apt:
        name: aptitude
        state: latest
        update_cache: true

    - name: Install required system packages
      apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-pip
          - virtualenv
          - python3-setuptools
        state: latest
        update_cache: true

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu bionic stable
        state: present

    - name: Update apt and install docker-ce
      apt:
        name: docker-ce
        state: latest
        update_cache: true

    - name: Update apt and install ansible
      apt:
        name: ansible
        state: latest
        update_cache: true

    - name: Install Docker Module for Python
      pip:
        name: docker

    - name: Inspect multiple images
      docker_image_info:
        name:
          - ./capstone_project/hello-world/Dockerfile
          - ./ansible_files/build_local_Dockerfile/Dockerfile
      register: result

    - name: Make sure that both images exist locally
      assert:
        that:
          - result.images | length == 2

    # Log into Dockerhub and pull down image from other account
    - name: Log into DockerHub
      docker_login:
        state: present
        username: ${{ secrets.DOCKERHUB_ANSIBLE_USERNAME }}
        password: ${{ secrets.DOCKERHUB_ANSIBLE_TOKEN }}

    - name: ensure a container is running
      docker_container:
        name: hello-world
        state: started
        image: "${{ secrets.DOCKERHUB_USERNAME }}/hello-world:latest"
        pull: true
        ports:
          - "3000:3000"

    - name: Log out of DockerHub
      docker_login:
        state: absent