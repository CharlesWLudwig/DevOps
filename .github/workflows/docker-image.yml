name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions: write-all

jobs:

  build:

    runs-on: ubuntu-latest
    env:
      ANSIBLE_HOST_KEY_CHECKING: False

    steps:
    - name: 1. SETUP YOUR DEVELOPMENT ENVIRONMENT
      uses: actions/checkout@v3
      with:
        submodules: true
        token: ${{ secrets.SSH_TOKEN }}

    - name: Set up Python3
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        architecture: 'x64'

    - name: Install Python Dependencies
      run: |
        pip install --upgrade pip ansible setuptools wheel pip-install-test tox
        tox -e py
        pip freeze > capstone_project/hello-world/requirements.txt
        pip install -r capstone_project/hello-world/requirements.txt
      continue-on-error: true

    # ansible-playbook github_deploy.yml -i hosts_github 
    # Set up Docker for GitHub Actions environment
    - name: Set up Docker
      uses: crazy-max/ghaction-setup-docker@v1      

    # ansible-playbook github_deploy.yml -i hosts_github 
    # Set up Docker for GitHub Actions environment
    - name: Build the Docker image
      run: docker build . --file .github/actions/ansible/Dockerfile --tag ansible-actions:latest
  
      # Setting up ansible shell dependencies
    - name: Start up ansible community modules
      shell: bash
      run: |
        git update-index --chmod=+x ./.github/actions/ansible/startup.sh 
        mkdir ~/.ssh
        echo "${{secrets.SSH_KEY}}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

      # Setting up ansible Dockerfile build dependencies
    - name: 3. CREATE A CI PIPELINE 
      uses: artis3n/ansible_galaxy_collection@v2.8.3
      with:
        api_key: ${{ secrets.GALAXY_API_KEY }}
        publish: false

    - name: Install ansible collection
      working-directory: ./ansible
      run: |
        ansible-galaxy collection install community.docker

    - name: Lint Ansible Playbook
      uses: ansible/ansible-lint-action@main
      with:
        path: ./ansible

    - name: Deploy via Ansible
      working-directory: ./ansible
      run: |
        ansible-playbook -i inventory.ini playbook.yml

    # Log into Docker Hub (for Docker file upload)
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
          
    - name: Setting up Docker Build 
      uses: docker/setup-buildx-action@v2

    - name: Containerize Hello-World for Docker Upload
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./capstone_project/hello-world/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/hello-world:latest

    - name: Containerize Ansible Dockerfile Upload
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./.github/actions/ansible/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/ansible-actions:latest

    - name: 4. UPDATE 'HELLO WORLD!' APP TO 'HELLO DEVOPS!'
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./ansible/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/hello-devops:latest