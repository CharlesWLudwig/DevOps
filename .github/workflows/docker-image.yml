name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions: write-all

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - name: 1. SETUP YOUR DEVELOPMENT ENVIRONMENT
      uses: actions/checkout@v3
      with:
        submodules: true
        token: ${{ secrets.SSH_TOKEN }}

    - name: Set up Python3
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        # Optional - x64 or x86 architecture, defaults to x64
        architecture: 'x64'

    - name: Lint with ruff
      run: |
        pip install --upgrade pip setuptools wheel pip-install-test 
        pip install ruff
        # stop the build if there are Python syntax errors or undefined names
        ruff --format=github --select=E9,F63,F7,F82 --target-version=py37 .
        # default set of ruff rules with GitHub Annotations
        ruff --format=github --target-version=py37 .
      continue-on-error: true

    - name: Install other modules as needed
      run: |
        pip install tox
        tox -e py
        pip freeze > capstone_project/hello-world/requirements.txt
        pip install -r capstone_project/hello-world/requirements.txt

      # Setting up ansible Dockerfile build dependencies
    - name: Build (Ansible Dependencies) Dockerfile 
      run: docker build . --file ansible_base/Dockerfile --tag load-ansible-dependencies:latest

      # Setting up ansible Dockerfile run
    - name: Run (Ansible Dependencies) Dockerfile 
      run: docker run -dp 5000:5000 load-ansible-dependencies:latest

      # Setting up ansible Marketplace galaxy-collection (for Docker Community modules not present in main ansible modules)
    - name: Setting up Ansible Galaxy Collection
      uses: artis3n/ansible_galaxy_collection@v2.8.3
      with:
        api_key: ${{ secrets.GALAXY_API_KEY }}
        publish: false

      # Setting up ansible shell dependencies
    - name: Start up ansible community modules
      shell: bash
      run: |
        git update-index --chmod=+x ./ansible_base/startup.sh 

    # Set up Docker for GitHub Actions environment
    - name: Set up Docker
      uses: crazy-max/ghaction-setup-docker@v1      

    # Log into Docker Hub (for Docker file upload)
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
          
    - name: Setting up Docker Build 
      uses: docker/setup-buildx-action@v2

    - name: 2. CONTAINERIZE THE APPLICATION
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./capstone_project/hello-world/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/hello-world:latest

    - name: 3. CREATE A CI PIPELINE (BUILD / LOAD / SAVE PLAYBOOK)
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./ansible_base/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/ansible-base:latest

    - name: 4. UPDATE 'HELLO WORLD!' APP TO 'HELLO DEVOPS!'
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./ansible_files/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/hello-devops:latest

    # See successful image locally created by Docker
    - name: Build local 'Hello World!' dockerfile
      run: docker build --file capstone_project/hello-world/Dockerfile -t hello-world:latest .

    - name: Build local 'Hello DevOps!' dockerfile
      run: docker build --file ansible_files/Dockerfile -t hello-devops:latest .

    # See successful image locally created by Docker
    - name: List docker images
      run: docker images -a

    # Run current image locally created by Docker
    - name: Run docker image hello-devops
      run: docker run -p 3000:3000 --name hello-devops

    # Run current image locally created by Docker
    - name: Run docker image -p 4000:4000 --name hello-world
      run: docker run -p 3000:3000 --name hello-devops

    # See current image locally created by Docker
    - name: Current docker images
      run: docker ps
