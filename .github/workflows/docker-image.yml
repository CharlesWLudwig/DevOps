name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions: write-all

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ANSIBLE_HOST_KEY_CHECKING: False

    steps:
    - name: 1. SETUP YOUR DEVELOPMENT ENVIRONMENT
      uses: actions/checkout@v3
      with:
        submodules: true
        token: ${{ secrets.SSH_TOKEN }}

    - name: Set up Python3
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        architecture: 'x64'

    - name: Install Python Dependencies
      run: |
        pip install --upgrade pip setuptools wheel pip-install-test tox
        tox -e py
      continue-on-error: true

    # ansible-playbook github_deploy.yml -i hosts_github 
    # Set up Docker for GitHub Actions environment
    - name: Build the Docker image
      run: docker build . --file .github/actions/ansible/Dockerfile --tag ansible-actions:latest

    # ansible-playbook github_deploy.yml -i hosts_github 
    # Set up Docker for GitHub Actions environment
    - name: Run the Docker image
      run: docker run -dp 3000:3000 ansible-actions:latest

      # Setting up ansible shell dependencies
    - name: Start up ansible community modules
      shell: bash
      run: |
        git update-index --chmod=+x ./.github/actions/ansible/startup.sh 
        mkdir ~/.ssh
        echo "${{secrets.SSH_KEY}}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

      # Setting up ansible Dockerfile build dependencies
    - name: 3. CREATE A CI PIPELINE 
      uses: artis3n/ansible_galaxy_collection@v2.8.3
      with:
        api_key: ${{ secrets.GALAXY_API_KEY }}
        publish: false

    - name: Install ansible collection
      working-directory: ./ansible
      run: |
        ansible-galaxy collection install community.docker
        ansible-playbook playbook.yml -i inventory.ini --extra-vars "dockerhub_username=${{ secrets.DOCKERHUB_USERNAME }} dockerhub_password=${{ secrets.DOCKERHUB_TOKEN }}"